[project]
name = "cycling-website"
version = "1.0.0"
description = "Cycling routes website with GPX management"
channels = ["conda-forge"]
platforms = ["osx-arm64", "osx-64", "linux-64", "win-64"]

[dependencies]
python = "==3.11"
fastapi = "*"
uvicorn = "*"
gpxpy = "*"
python-multipart = "*"
sqlalchemy = "*"
asyncpg = "*"
boto3 = "*"
python-dotenv = "*"
pre-commit = "*"

[feature.dev.dependencies]
ipykernel = "*"
ipython = "*"
jupyterlab = "*"

[feature.lint.dependencies]
ruff = "*" # Python linter and formatter
pre-commit = "*" # Git hooks framework

[feature.tests.dependencies]
pytest = "*"
pytest-cov = "*"
moto = "*"

[tasks]
start-backend-local = { cmd = "uvicorn src.main:app --reload --host 0.0.0.0 --port 8000", cwd = "backend", env = { ENVIRONMENT = "local" } }
start-backend-s3 = { cmd = "uvicorn src.main:app --reload --host 0.0.0.0 --port 8000", cwd = "backend", env = { ENVIRONMENT = "s3" } }
start-backend-staging = { cmd = "uvicorn src.main:app --reload --host 0.0.0.0 --port 8000", cwd = "backend", env = { ENVIRONMENT = "staging" } }
start-backend-production = { cmd = "uvicorn src.main:app --reload --host 0.0.0.0 --port 8000", cwd = "backend", env = { ENVIRONMENT = "production" } }
start-frontend = { cmd = "npm run dev", cwd = "frontend", depends-on = ["frontend-install"] }
frontend-install = { cmd = "npm install", cwd = "frontend" }
frontend-build = { cmd = "npm run build", cwd = "frontend", depends-on = ["frontend-install"] }

[feature.lint.tasks]
install-pre-commit = { cmd = "pre-commit install" }
pre-commit = { cmd = "pre-commit run --all-files" }
pre-commit-update = { cmd = "pre-commit autoupdate" }
lint-backend = { cmd = "ruff check backend/src/ backend/tests/ --fix" }
lint-frontend = { cmd = "npm run lint", cwd = "frontend", depends-on = ["frontend-install"] }
format-backend = { cmd = "ruff format backend/src/ backend/tests/ " }
format-frontend = { cmd = "npm run format", cwd = "frontend", depends-on = ["frontend-install"] }
lint-all = { depends-on = ["lint-backend", "lint-frontend"] }
format-all = { depends-on = ["format-backend", "format-frontend"] }
type-check-frontend = { cmd = "npm run type-check", cwd = "frontend", depends-on = ["frontend-install"] }

[feature.tests.tasks]
test-backend = { cmd = "python -m pytest backend/tests/ -q --cov=backend/src --cov-report=term-missing" }
test-frontend = { cmd = "npm install --no-audit --no-fund && npm run test:cov", cwd = "frontend" }

# Local Postgres via Docker
pg-up = { cmd = "docker run --name cycling-pg -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=cycling -p 5432:5432 -d postgres:16" }
pg-down = { cmd = "docker rm -f cycling-pg" }
# Export DATABASE_URL for backend tasks (example for local Docker)
env-dev = { cmd = "export DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/cycling" }


[environments]
dev = { features = ["dev", "tests", "lint"] }
